extends Node2D

# Preload wall scene
const WALL_SCENE := preload("res://assets/scenes/wall.tscn")

# Distance from center to spawn walls
const WALL_DISTANCE := 400

var walls : Dictionary = {}
var mech

var wall_health_base : Big = Big.new(6)
var wall_health : Big = wall_health_base
var wave_number : int = 1

# Directions: (name, offset, vertical, vertical_angle, flipped)
var directions = [
	{"name": "North", "offset": Vector2(0, -1), "vertical": true, "vertical_angle": 90.0, "flipped": false},
	{"name": "South", "offset": Vector2(0, 1), "vertical": true, "vertical_angle": -90.0, "flipped": false},
	{"name": "West", "offset": Vector2(-1, 0), "vertical": false, "flipped": false},
	{"name": "East", "offset": Vector2(1, 0), "vertical": false, "flipped": true}
]

func are_walls_visible() -> bool:
	var viewport_rect = get_viewport().get_visible_rect()
	for child in get_children():
		if child.is_in_group("wall"):
			if viewport_rect.has_point(child.global_position):
				return true
	return false

func _ready():
	var _initialized = initialize_stats()
	AudioManager.play_sound(preload("res://assets/gym.wav"), 0.2)
	GLOBAL.GAME_SCENE = self # Set the global game scene variable
	mech = $Mech
	mech.position = get_viewport_rect().size / 2
	await spawn_waves()

func get_wall_health_for_wave(wave: int) -> Big:
	# Example idle game scaling: base * (1.15 ^ (wave-1))
	return Big.times(wall_health_base, Big.new(pow(1.15, wave-1)))

func spawn_walls():
	var wall_group : WallGroup = WallGroup.new()
	wall_group.walls_health = get_wall_health_for_wave(GLOBAL.WAVE_NUMBER)
	for dir in directions:
		var wall = WALL_SCENE.instantiate()
		wall.name = "Wall_%s" % dir["name"]
		add_child(wall)
		wall.position = mech.position + dir["offset"] * WALL_DISTANCE
		wall.target_position = mech.position
		wall.wall_group = wall_group
		wall.set_meta("vertical", dir["vertical"])
		if dir.has("vertical_angle"):
			wall.set_meta("vertical_angle", dir["vertical_angle"])
		wall.set_meta("flipped", dir["flipped"])
		wall.apply_meta() # Ensure all meta is applied after meta is set
		wall_group.add_wall(wall)

func spawn_waves() -> void:
	for i in range(5000):
		spawn_walls()
		GLOBAL.WAVE_NUMBER += 1
		await get_tree().create_timer(GLOBAL.WAVE_TIME).timeout

func initialize_stats() -> bool:
	GLOBAL.STATS = Stats.new()
	var stat : Stat
	# Energy Converter Upgrades
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_CONVERTER, 1, 1, 1, 100, Big.new(5), 7, GLOBAL.UNLOCK_METRIC.ALWAYS_UNLOCKED, Big.new(0), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_CONVERTER, 2, 10, 10, 100, Big.new(50), 7, GLOBAL.UNLOCK_METRIC.ALWAYS_UNLOCKED, Big.new(0), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_CONVERTER, 3, 100, 100, 100, Big.new(500), 7, GLOBAL.UNLOCK_METRIC.ALWAYS_UNLOCKED, Big.new(0), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_CONVERTER, 4, 500, 500, 100, Big.new(2500), 7, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(1000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_CONVERTER, 5, 1000, 1000, 100, Big.new(10000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(3000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_CONVERTER, 6, 3000, 3000, 100, Big.new(20000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(9000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_CONVERTER, 7, 6000, 6000, 100, Big.new(100000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(27000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_CONVERTER, 8, 10000, 10000, 100, Big.new(500000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(81000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_CONVERTER, 9, 50000, 50000, 100, Big.new(2500000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(243000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_CONVERTER, 10, 100000, 100000, 100, Big.new(12500000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(729000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_CONVERTER, 11, 1000000, 1000000, 100, Big.new(62500000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(2187000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	# Energy Collector Upgrades
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_COLLECTOR, 1, 1, 1, 100, Big.new(10), 7, GLOBAL.UNLOCK_METRIC.ALWAYS_UNLOCKED, Big.new(0), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_COLLECTOR, 2, 5, 5, 100, Big.new(100), 7, GLOBAL.UNLOCK_METRIC.TOTAL_CLICKS, Big.new(10), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_COLLECTOR, 3, 10, 10, 100, Big.new(1000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_CLICKS, Big.new(25), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_COLLECTOR, 4, 25, 25, 100, Big.new(10000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_CLICKS, Big.new(50), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_COLLECTOR, 5, 50, 50, 100, Big.new(100000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_CLICKS, Big.new(100), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_COLLECTOR, 6, 100, 100, 100, Big.new(1000000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_CLICKS, Big.new(250), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_COLLECTOR, 7, 250, 250, 100, Big.new(10000000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_CLICKS, Big.new(750), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_COLLECTOR, 8, 750, 750, 100, Big.new(100000000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_CLICKS, Big.new(1500), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_COLLECTOR, 9, 1500, 1500, 100, Big.new(1000000000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_CLICKS, Big.new(5000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_COLLECTOR, 10, 5000, 5000, 100, Big.new(10000000000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_CLICKS, Big.new(10000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_COLLECTOR, 11, 10000, 10000, 100, Big.new(100000000000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_CLICKS, Big.new(25000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	# Energy Vault Upgrades
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_VAULT, 1, 1, 1, 100, Big.new(1000), 7, GLOBAL.UNLOCK_METRIC.TOTAL_LIFETIME_COINS_GATHERED, Big.new(10000), GLOBAL.VALUE_APPLIED_TO.ENERGY_GLOBAL_INCREASE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_VAULT, 2, 5, 5, 100, Big.new(5000), 7, GLOBAL.UNLOCK_METRIC.ENERGY_INCREASE_T1, Big.new(10), GLOBAL.VALUE_APPLIED_TO.ENERGY_GLOBAL_INCREASE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_VAULT, 3, 10, 10, 100, Big.new(20000), 7, GLOBAL.UNLOCK_METRIC.ENERGY_INCREASE_T1, Big.new(25), GLOBAL.VALUE_APPLIED_TO.ENERGY_GLOBAL_INCREASE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_VAULT, 4, 25, 25, 100, Big.new(200000), 7, GLOBAL.UNLOCK_METRIC.ENERGY_INCREASE_T1, Big.new(50), GLOBAL.VALUE_APPLIED_TO.ENERGY_GLOBAL_INCREASE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_VAULT, 5, 50, 50, 100, Big.new(1000000), 7, GLOBAL.UNLOCK_METRIC.ENERGY_INCREASE_T1, Big.new(75), GLOBAL.VALUE_APPLIED_TO.ENERGY_GLOBAL_INCREASE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_VAULT, 6, 100, 100, 100, Big.new(5000000), 7, GLOBAL.UNLOCK_METRIC.ENERGY_INCREASE_T1, Big.new(100), GLOBAL.VALUE_APPLIED_TO.ENERGY_GLOBAL_INCREASE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_VAULT, 7, 500, 500, 100, Big.new(20000000), 7, GLOBAL.UNLOCK_METRIC.ENERGY_INCREASE_T1, Big.new(125), GLOBAL.VALUE_APPLIED_TO.ENERGY_GLOBAL_INCREASE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_VAULT, 8, 1000, 1000, 100, Big.new(200000000), 7, GLOBAL.UNLOCK_METRIC.ENERGY_INCREASE_T1, Big.new(150), GLOBAL.VALUE_APPLIED_TO.ENERGY_GLOBAL_INCREASE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_VAULT, 9, 10000, 10000, 100, Big.new(20000000000), 7, GLOBAL.UNLOCK_METRIC.ENERGY_INCREASE_T1, Big.new(200), GLOBAL.VALUE_APPLIED_TO.ENERGY_GLOBAL_INCREASE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_VAULT, 10, 100000, 100000, 100, Big.new(20000000000000), 7, GLOBAL.UNLOCK_METRIC.ENERGY_INCREASE_T1, Big.new(250), GLOBAL.VALUE_APPLIED_TO.ENERGY_GLOBAL_INCREASE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_VAULT, 11, 1000000, 1000000, 100, Big.new(20000000000000000), 7, GLOBAL.UNLOCK_METRIC.ENERGY_INCREASE_T1, Big.new(300), GLOBAL.VALUE_APPLIED_TO.ENERGY_GLOBAL_INCREASE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)

	# Power Cell Upgrades
	stat = Stat.new(GLOBAL.STAT_TYPE.POWER_CELL, 1, 1, 1, 100, Big.new(50), 7, GLOBAL.UNLOCK_METRIC.ALWAYS_UNLOCKED, Big.new(0), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.POWER_CELL, 2, 10, 10, 100, Big.new(250), 7, GLOBAL.UNLOCK_METRIC.ALWAYS_UNLOCKED, Big.new(0), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.POWER_CELL, 3, 25, 25, 100, Big.new(1000), 7, GLOBAL.UNLOCK_METRIC.ALWAYS_UNLOCKED, Big.new(0), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.POWER_CELL, 4, 50, 50, 100, Big.new(10000), 7, GLOBAL.UNLOCK_METRIC.CURRENT_DAMAGE_CANNON, Big.new(500), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.POWER_CELL, 5, 100, 100, 100, Big.new(50000), 7, GLOBAL.UNLOCK_METRIC.CURRENT_DAMAGE_CANNON, Big.new(1000), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.POWER_CELL, 6, 250, 250, 100, Big.new(250000), 7, GLOBAL.UNLOCK_METRIC.CURRENT_DAMAGE_CANNON, Big.new(5000), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.POWER_CELL, 7, 1000, 1000, 100, Big.new(1000000), 7, GLOBAL.UNLOCK_METRIC.CURRENT_DAMAGE_CANNON, Big.new(25000), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.POWER_CELL, 8, 5000, 5000, 100, Big.new(10000000), 7, GLOBAL.UNLOCK_METRIC.CURRENT_DAMAGE_CANNON, Big.new(125000), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.POWER_CELL, 9, 20000, 20000, 100, Big.new(1000000000), 7, GLOBAL.UNLOCK_METRIC.CURRENT_DAMAGE_CANNON, Big.new(625000), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.POWER_CELL, 10, 100000, 100000, 100, Big.new(100000000000), 7, GLOBAL.UNLOCK_METRIC.CURRENT_DAMAGE_CANNON, Big.new(3125000), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	stat = Stat.new(GLOBAL.STAT_TYPE.POWER_CELL, 11, 1000000, 1000000, 100, Big.new(10000000000000), 7, GLOBAL.UNLOCK_METRIC.CURRENT_DAMAGE_CANNON, Big.new(15625000), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)

	# Special Upgrades
	# Tesseract Energy Matrix (EPS multiplier)
	stat = Stat.new(GLOBAL.STAT_TYPE.TESSARACT_ENERGY_MATRIX, 1, 2, 1, 3, Big.new(5000000), 1000, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(20000000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	# Echo of the Collapsing Core (EPS multiplier)
	stat = Stat.new(GLOBAL.STAT_TYPE.ECHO_OF_THE_COLLAPSING_CORE, 2, 2, 1, 5, Big.new(500000000), 5000, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(4000000000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	# Fragment of the First Spark (EPS multiplier)
	stat = Stat.new(GLOBAL.STAT_TYPE.FRAGMENT_OF_THE_FIRST_SPARK, 3, 2, 1, 10, Big.new(150000000000), 10000, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(4280000000000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	# Omnicore Collection Engine (EPC multiplier)
	stat = Stat.new(GLOBAL.STAT_TYPE.OMNICORE_COLLECTION_ENGINE, 1, 2, 1, 3, Big.new(5000000), 1000, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(20000000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	# Singularity Intake (EPC multiplier)
	stat = Stat.new(GLOBAL.STAT_TYPE.SINGULARITY_INTAKE, 2, 2, 1, 5, Big.new(500000000), 5000, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(4000000000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	# Pulse of the Universe (EPC multiplier)
	stat = Stat.new(GLOBAL.STAT_TYPE.PULSE_OF_THE_UNIVERSE, 3, 2, 1, 10, Big.new(150000000000), 10000, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(4280000000000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	# Energy Amplifier (EPS percent increase)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_AMPLIFIER, 1, 0.5, 0.5, 999, Big.new(10000), 25, GLOBAL.UNLOCK_METRIC.TOTAL_TPS, Big.new(50000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_SECOND, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.PERCENTAGE)
	GLOBAL.STATS.add_stat(stat)
	# Energy Core (EPC percent increase)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_CORE, 1, 0.5, 0.5, 999, Big.new(10000), 25, GLOBAL.UNLOCK_METRIC.TOTAL_CLICKS, Big.new(2000), GLOBAL.VALUE_APPLIED_TO.ENERGY_PER_CELL, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.PERCENTAGE)
	GLOBAL.STATS.add_stat(stat)
	# Hollow Drive (all sources percent increase)
	stat = Stat.new(GLOBAL.STAT_TYPE.HOLLOW_DRIVE, 1, 0.25, 0.25, 999, Big.new(1000000), 25, GLOBAL.UNLOCK_METRIC.TOTAL_LIFETIME_COINS_GATHERED, Big.new(100000000), GLOBAL.VALUE_APPLIED_TO.ENERGY_GLOBAL_INCREASE, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.PERCENTAGE)
	GLOBAL.STATS.add_stat(stat)
	# Harvester (auto absorb energy cells)
	stat = Stat.new(GLOBAL.STAT_TYPE.HARVESTER, 1, 1, 0.05, 100, Big.new(500), 13, GLOBAL.UNLOCK_METRIC.TOTAL_CLICKS, Big.new(100), GLOBAL.VALUE_APPLIED_TO.MECH_ABSORPTION, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	# Energy Auto-Cannon (auto shoot)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_AUTO_CANNON, 1, 1, 0, 1,Big.new(100), 0, GLOBAL.UNLOCK_METRIC.MANUAL_SHOTS, Big.new(10), GLOBAL.VALUE_APPLIED_TO.CANNON_SHOOT_RATE, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	# Pulse Overdrive (main cannon percent increase)
	stat = Stat.new(GLOBAL.STAT_TYPE.PULSE_OVERDRIVE, 1, 0.5, 0.5, 500, Big.new(200), 30, GLOBAL.UNLOCK_METRIC.CURRENT_DAMAGE_CANNON, Big.new(200), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.PERCENTAGE)
	GLOBAL.STATS.add_stat(stat)
	# Darkflow Overdrive (main cannon percent increase)
	stat = Stat.new(GLOBAL.STAT_TYPE.PULSE_OVERDRIVE, 2, 1, 1, 500, Big.new(400), 30, GLOBAL.UNLOCK_METRIC.CURRENT_DAMAGE_CANNON, Big.new(10000), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.PERCENTAGE)
	GLOBAL.STATS.add_stat(stat)
	# Voidstorm Overdrive (main cannon percent increase)
	stat = Stat.new(GLOBAL.STAT_TYPE.PULSE_OVERDRIVE, 3, 2, 2, 500, Big.new(800), 30, GLOBAL.UNLOCK_METRIC.CURRENT_DAMAGE_CANNON, Big.new(100000), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.PERCENTAGE)
	GLOBAL.STATS.add_stat(stat)
	# Rift Amplifier (main cannon multiplier)
	stat = Stat.new(GLOBAL.STAT_TYPE.RIFT_AMPLIFIER, 1, 2, 1, 10, Big.new(25000000), 1000, GLOBAL.UNLOCK_METRIC.CURRENT_DAMAGE_CANNON, Big.new(1500000), GLOBAL.VALUE_APPLIED_TO.MAIN_CANNON_DAMAGE, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	# Energy Cannon Blast-Splitter (projectile amount)
	stat = Stat.new(GLOBAL.STAT_TYPE.ENERGY_CANNON_BLAST_SPLITTER, 1, 1, 1, 10, Big.new(500), 500, GLOBAL.UNLOCK_METRIC.CURRENT_DAMAGE_CANNON, Big.new(200), GLOBAL.VALUE_APPLIED_TO.PROJECTILE_AMOUNT, GLOBAL.VALUE_APPLICATION_TYPE.ADDITION, GLOBAL.VALUE_TYPE.NUMBER)
	GLOBAL.STATS.add_stat(stat)
	# Velocity Amplifier (attack speed)
	stat = Stat.new(GLOBAL.STAT_TYPE.VELOCITY_AMPLIFIER, 1, 7, 7, 500, Big.new(50), 9, GLOBAL.UNLOCK_METRIC.ALWAYS_UNLOCKED, Big.new(0), GLOBAL.VALUE_APPLIED_TO.ATTACK_SPEED, GLOBAL.VALUE_APPLICATION_TYPE.MULTIPLICATION, GLOBAL.VALUE_TYPE.PERCENTAGE)
	GLOBAL.STATS.add_stat(stat)

	return true
